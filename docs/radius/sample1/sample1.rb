#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'pp'
require 'strscan'

class MyParser < Racc::Parser

module_eval(<<'...end sample1.ry/module_eval...', 'sample1.ry', 11)
attr_accessor :yydebug
attr_accessor :verbose

def parse(str)
  s = StringScanner.new(str)
  @q = []

  until s.eos?
    s.scan(/\d+/) ? @q << [:NUMBER,      s.matched] :
    s.scan(/./)     ? @q << [s.matched, s.matched] :
    (raise "scanner error")
  end

  pp @q if verbose

  do_parse
end

def next_token
  @q.shift
end

...end sample1.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     4,     5,     2 ]

racc_action_check = [
     1,     2,     3,     0 ]

racc_action_pointer = [
     1,     0,    -2,     2,   nil,   nil ]

racc_action_default = [
    -2,    -2,    -2,    -2,    -1,     6 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 5, :_reduce_none ]

racc_reduce_n = 2

racc_shift_n = 6

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  "." => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "\".\"",
  "$start",
  "statement" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyParser

if __FILE__ == $0
  require 'optparse'
  require 'ostruct'

  opt = OpenStruct.new ARGV.getopts 'vd'
  str = ARGV.shift or (raise "no arguments")

  parser = MyParser.new
  parser.yydebug = opt.d
  parser.verbose = opt.v


  begin
    p parser.parse(str)
  rescue Racc::ParseError => e
    $stderr.puts e
  end
end
