#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'pp'
require 'strscan'

class MyParser < Racc::Parser

module_eval(<<'...end sample2_c.ry/module_eval...', 'sample2_c.ry', 16)
attr_accessor :yydebug
attr_accessor :verbose

def parse(str)
  s = StringScanner.new(str)
  @q = []

  until s.eos?
    s.scan(/\d+/)   ? @q << [:DEC,      s.matched] :
        s.scan(/./)     ? @q << [s.matched, s.matched] :
             (raise "scanner error")
  end

  pp @q if verbose

  do_parse
end

def next_token
  @q.shift
end

...end sample2_c.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,     6,     7,     3,     6,     2 ]

racc_action_check = [
     4,     4,     2,     3,     1,     9,     0 ]

racc_action_pointer = [
     4,     4,    -3,     3,    -3,   nil,   nil,   nil,   nil,     0,
   nil ]

racc_action_default = [
    -5,    -5,    -5,    -5,    -5,    -2,    -4,    11,    -1,    -5,
    -3 ]

racc_goto_table = [
     5,     4,     1,   nil,   nil,   nil,   nil,    10 ]

racc_goto_check = [
     3,     2,     1,   nil,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,    -1,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  1, 8, :_reduce_2,
  3, 8, :_reduce_3,
  1, 9, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  "[" => 2,
  "]" => 3,
  "," => 4,
  :DEC => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "DEC",
  "$start",
  "statement",
  "number_list",
  "number" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sample2_c.ry', 2)
  def _reduce_1(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'sample2_c.ry', 4)
  def _reduce_2(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'sample2_c.ry', 5)
  def _reduce_3(val, _values, result)
    result << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'sample2_c.ry', 7)
  def _reduce_4(val, _values, result)
    result = val[0].to_i
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyParser

if __FILE__ == $0
  require 'optparse'
  require 'ostruct'

  opt = OpenStruct.new ARGV.getopts 'vd'
  str = ARGV.shift or (raise "no arguments")

  parser = MyParser.new
  parser.yydebug = opt.d
  parser.verbose = opt.v


  begin
    p parser.parse(str)
  rescue Racc::ParseError => e
    $stderr.puts e
  end
end
