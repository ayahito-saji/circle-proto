class MyParser
rule
  statement : NUMBER '.'
end

---- header
require 'pp'
require 'strscan'

---- inner
attr_accessor :yydebug
attr_accessor :verbose

def parse(str)
  s = StringScanner.new(str)
  @q = []

  until s.eos?
    s.scan(/\d+/) ? @q << [:NUMBER,      s.matched] :
    s.scan(/./)     ? @q << [s.matched, s.matched] :
    (raise "scanner error")
  end

  pp @q if verbose

  do_parse
end

def next_token
  @q.shift
end

---- footer
if __FILE__ == $0
  require 'optparse'
  require 'ostruct'

  opt = OpenStruct.new ARGV.getopts 'vd'
  str = ARGV.shift or (raise "no arguments")

  parser = MyParser.new
  parser.yydebug = opt.d
  parser.verbose = opt.v


  begin
    p parser.parse(str)
  rescue Racc::ParseError => e
    $stderr.puts e
  end
end