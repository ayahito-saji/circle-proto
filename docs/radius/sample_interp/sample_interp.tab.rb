#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'pp'
require 'strscan'

class SampleInterp < Racc::Parser

module_eval(<<'...end sample_interp.ry/module_eval...', 'sample_interp.ry', 17)

def parse(str)
  scanner = StringScanner.new(str)
  @q = []
  while !scanner.eos?
    scanner.scan(/\d+/) ? @q << [:DEC, scanner.matched.to_i] :
    scanner.scan(/./) ? @q << [scanner.matched, scanner.matched] :
    (raise "scanner error")
  end
  pp(@q)

  do_parse
end

def next_token
  @q.shift
end

...end sample_interp.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     7,     8,     5,     7 ]

racc_action_check = [
     0,     1,     2,     6,     7,     9 ]

racc_action_pointer = [
    -3,     1,     0,   nil,   nil,   nil,     3,     1,   nil,     3 ]

racc_action_default = [
    -6,    -6,    -1,    -3,    -4,    -5,    -6,    -6,    10,    -2 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,   nil,     9 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 5, :_reduce_1,
  3, 6, :_reduce_2,
  1, 6, :_reduce_none,
  1, 7, :_reduce_none,
  1, 8, :_reduce_none ]

racc_reduce_n = 6

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  "+" => 2,
  :DEC => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"+\"",
  "DEC",
  "$start",
  "statement",
  "value",
  "lit",
  "number" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'sample_interp.ry', 2)
  def _reduce_1(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'sample_interp.ry', 4)
  def _reduce_2(val, _values, result)
    result = ['+', val[0], val[2]]
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SampleInterp

if __FILE__ == $0
  parser = SampleInterp.new
  str = "1+2+3"
  res = parser.parse(str)
  p res
end
